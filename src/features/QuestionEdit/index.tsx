import {useEffect, useState} from "react";
import {Link} from "react-chrome-extension-router";

import InfoBox from "src/features/QuestionEdit/components/InfoBox";
import App from "../../Downloads/chrome-extension-production/src/App";
import {FancySumitArrow, InputIcon, TapAnyInput} from "../../Downloads/chrome-extension-production/src/lib/svg";
import {Textarea} from "@/components/ui/textarea";
import AIQuestionResponseThread from "../AIQuestionResponseThread";
import Sidebar from "@/components/Sidebar.tsx";

export default function InputGeneration() {
    const [labelText, setLabelText] = useState(
        "Who writes code, or does other technical work on your product? Was any of it done by a non-founder? Please explain."
    );

    const [hasClipboardContent, setHasClipboardContent] = useState(false);
    const [clipboardText, setClipboardText] = useState("");

    const checkClipboard = async () => {
        try {
            const text = await navigator.clipboard.readText();
            setHasClipboardContent(text.length > 0);
            setClipboardText(text);
        } catch {
            console.log("Clipboard access denied or empty");
            setHasClipboardContent(false);
            setClipboardText("");
        }
    };

    useEffect(() => {
        checkClipboard();

        const handleFocus = () => {
            checkClipboard();
        };

        window.addEventListener("focus", handleFocus);

        const handleClipboardChange = () => {
            checkClipboard();
        };

        document.addEventListener("copy", handleClipboardChange);
        document.addEventListener("cut", handleClipboardChange);

        // Cleanup
        return () => {
            window.removeEventListener("focus", handleFocus);
            document.removeEventListener("copy", handleClipboardChange);
            document.removeEventListener("cut", handleClipboardChange);
        };
    }, []);

    //use chrome.storage.local
    const [showInfoBoxOne, setShowInfoBoxOne] = useState(true);
    const [showInfoBoxTwo, setShowInfoBoxTwo] = useState(true);

    //use chrome stroage
    const [showEnsureCorrectQuestionPopup, setShowEnsureCorrectQuestionPopup] =
        useState(true);

    //temporary
    const [focus, setFocus] = useState<"without-focus" | "with-focus">(
        "without-focus"
    );

    return (
        <>
            {/* TODO: remove - used for styling*/}

            <div className="w-full h-[100dvh] ">
                <div
                    className="w-full h-full  p-2 text-start flex gap-2 items-center rounded-[15px] justify-center bg-[#fdebe5]">
                    <div className="bg-white w-full h-full rounded-xl p-4">
                    <button
                        className="absolute top-[10rem]"
                        onClick={() => {
                            if (focus === "with-focus") {
                                setFocus("without-focus");
                            } else {
                                setFocus("with-focus");
                            }
                        }}
                    >
                        focus toggle
                    </button>
                    <div className="h-[calc(100dvh-7dvh)] flex justify-between flex-col">
                        {showInfoBoxOne || showInfoBoxTwo ? (
                            <div className="space-y-4">
                                {showInfoBoxOne && (
                                    <InfoBox
                                        text={
                                            <div className="text-start">
                                                <span>Happly’s all about you! We use your</span>{" "}
                                                <Link component={App} className="underline text-[#dee3ec]">
                                                    profile
                                                </Link>{" "}
                                                <span>
                      to create spot-on AI responses. Keep it updated, and if
                      you add more about your business, we’ll make the answers
                      even better!
                    </span>
                                            </div>
                                        }
                                        onCloseClick={() => setShowInfoBoxOne(false)}
                                    />
                                )}

                                {showInfoBoxTwo && (
                                    <InfoBox
                                        text={
                                            <div className="text-start">
                                                You can whether tap the any input field or select the
                                                question text to get started!
                                            </div>
                                        }
                                        onCloseClick={() => setShowInfoBoxTwo(false)}
                                    />
                                )}
                            </div>
                        ) : (
                            <div/>
                        )}

                        {/* Without input focus */}
                        {focus === "without-focus" && (
                            <div className="flex flex-col items-center justify-start h-[50vh]">
                                <TapAnyInput/>

                                <p className="text-[#282c30]/50 text-sm font-light mt-4 mb-[32px]">
                                    Tap the any input field or select the question text on the right
                                    to tweak your answer to get started!
                                </p>

                                <InputIcon/>
                            </div>
                        )}

                        {/* With input focus */}
                        {focus === "with-focus" && (
                            <div className="space-y-4">
                                {showEnsureCorrectQuestionPopup && (
                                    <div
                                        className="text-[#282c30]/80 text-xs font-light leading-[18px] w-64 bg-white rounded-[15px] h-[130.72px] shadow-sm px-6 pt-5 pb-[27px] text-start space-y-2 border">
                                        <p>
                                            Ensure this is the correct question you want to answer; if
                                            not, edit it or select the text again.
                                        </p>

                                        <div className="flex justify-end">
                                            <button
                                                className="text-[#6422c8] text-xs font-medium bg-white !border-none self-end !p-0"
                                                onClick={() => setShowEnsureCorrectQuestionPopup(false)}
                                            >
                                                Got it
                                            </button>
                                        </div>
                                    </div>
                                )}

                                <div
                                    className="bg-white outline-[#6422c8]/5 p-6 rounded-[18px] border border-[#6422c8] w-full">
                                    <Textarea
                                        className="w-full resize-none border-none shadow-none !outline-none !ring-0 min-h-[80px] text-[#282c30] text-sm font-light"
                                        value={labelText}
                                        onChange={(e) => setLabelText(e.target.value)}
                                    />

                                    <div className="w-full flex items-center justify-between mt-4 h-9">
                                        <div className="flex items-center gap-2">
                                            {labelText ? (
                                                <button onClick={() => setLabelText("")}>
                                                    {trashCanIcon}
                                                </button>
                                            ) : (
                                                <div/>
                                            )}

                                            {hasClipboardContent && (
                                                <button
                                                    //   className="text-[#6422c8] h-9 p-1 bg-[#6422c8]/5 rounded-[7px] text-sm font-light leading-7"
                                                    onClick={() => {
                                                        setLabelText(clipboardText);
                                                        setClipboardText("");
                                                        setHasClipboardContent(false);
                                                    }}
                                                >
                                                    {clipBoardIcon}
                                                </button>
                                            )}
                                        </div>
                                        <Link
                                            component={AIQuestionResponseThread}
                                            props={{question: labelText}}
                                        >
                                            <FancySumitArrow/>
                                        </Link>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                    {" "}
                    </div>

                    <Sidebar page={"home" as const}/>
                </div>
            </div>
        </>
    );
}

const trashCanIcon = (
    <svg
        width="24"
        height="25"
        viewBox="0 0 24 25"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
    >
        <g opacity="0.7">
            <path
                d="M20.1742 7.74805H4.30579"
                stroke="#6422C8"
                strokeWidth="1.08"
                strokeLinecap="round"
                strokeLinejoin="round"
            />
            <path
                d="M18.882 10.7656L18.2946 18.8072C18.1731 20.4706 16.788 21.7595 15.119 21.7595H9.36567C7.69758 21.7595 6.31155 20.4706 6.19014 18.8063L5.60266 10.7656"
                stroke="#6422C8"
                strokeWidth="1.08"
                strokeLinecap="round"
                strokeLinejoin="round"
            />
            <path
                d="M15.8624 7.74372L15.3796 5.36674C15.2394 4.84278 14.764 4.47852 14.2223 4.47852H10.266C9.72153 4.47666 9.24422 4.84091 9.1032 5.36674L8.625 7.74372"
                stroke="#6422C8"
                strokeWidth="1.08"
                strokeLinecap="round"
                strokeLinejoin="round"
            />
        </g>
    </svg>
);

const clipBoardIcon = (
    <svg
        width="155"
        height="37"
        viewBox="0 0 155 37"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
    >
        <rect
            y="0.720703"
            width="155"
            height="36"
            rx="7"
            fill="#6422C8"
            fill-opacity="0.06"
        />
        <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M24.9361 13.9587H21.0638C20.4395 13.9587 19.9336 13.4528 19.9336 12.8285V12.3509C19.9336 11.7266 20.4395 11.2207 21.0638 11.2207H24.9361C25.5604 11.2207 26.0663 11.7266 26.0663 12.3509V12.8285C26.0663 13.4528 25.5604 13.9587 24.9361 13.9587Z"
            stroke="#6422C8"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
        />
        <path
            d="M26.067 12.5488C27.7947 12.5488 29.1957 13.9499 29.1957 15.6776V23.0922C29.1957 24.82 27.7947 26.221 26.067 26.221H19.9342C18.2064 26.221 16.8054 24.82 16.8054 23.0922V15.6776C16.8054 13.9499 18.2064 12.5488 19.9342 12.5488"
            stroke="#6422C8"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
        />
        <path
            d="M44.378 16.7487C44.378 17.5887 44.1027 18.2654 43.552 18.7787C43.0013 19.292 42.1753 19.5487 41.074 19.5487H39.1V23.7207H38.12V13.9347H41.074C42.166 13.9347 42.9873 14.1914 43.538 14.7047C44.098 15.218 44.378 15.8994 44.378 16.7487ZM41.074 18.7087C42.6047 18.7087 43.37 18.0554 43.37 16.7487C43.37 16.0954 43.188 15.6007 42.824 15.2647C42.46 14.9287 41.8767 14.7607 41.074 14.7607H39.1V18.7087H41.074ZM45.5743 19.8847C45.5743 19.1007 45.7283 18.4147 46.0363 17.8267C46.3537 17.2294 46.7877 16.772 47.3383 16.4547C47.8983 16.128 48.5283 15.9647 49.2283 15.9647C49.9563 15.9647 50.5817 16.1327 51.1043 16.4687C51.6363 16.8047 52.019 17.234 52.2523 17.7567V16.0767H53.2323V23.7207H52.2523V22.0267C52.0097 22.5494 51.6223 22.9834 51.0903 23.3287C50.5677 23.6647 49.9423 23.8327 49.2143 23.8327C48.5237 23.8327 47.8983 23.6694 47.3383 23.3427C46.7877 23.016 46.3537 22.554 46.0363 21.9567C45.7283 21.3594 45.5743 20.6687 45.5743 19.8847ZM52.2523 19.8987C52.2523 19.2827 52.1263 18.7414 51.8743 18.2747C51.6223 17.808 51.277 17.4487 50.8383 17.1967C50.409 16.9447 49.933 16.8187 49.4103 16.8187C48.869 16.8187 48.3837 16.94 47.9543 17.1827C47.525 17.4254 47.1843 17.78 46.9323 18.2467C46.6897 18.704 46.5683 19.25 46.5683 19.8847C46.5683 20.51 46.6897 21.0607 46.9323 21.5367C47.1843 22.0034 47.525 22.3627 47.9543 22.6147C48.3837 22.8574 48.869 22.9787 49.4103 22.9787C49.933 22.9787 50.409 22.8527 50.8383 22.6007C51.277 22.3487 51.6223 21.9894 51.8743 21.5227C52.1263 21.056 52.2523 20.5147 52.2523 19.8987ZM58.1016 23.8327C57.2243 23.8327 56.5056 23.632 55.9456 23.2307C55.3949 22.82 55.0869 22.2647 55.0216 21.5647H56.0296C56.0763 21.994 56.2769 22.344 56.6316 22.6147C56.9956 22.876 57.4809 23.0067 58.0876 23.0067C58.6196 23.0067 59.0349 22.8807 59.3336 22.6287C59.6416 22.3767 59.7956 22.064 59.7956 21.6907C59.7956 21.4294 59.7116 21.2147 59.5436 21.0467C59.3756 20.8787 59.1609 20.748 58.8996 20.6547C58.6476 20.552 58.3023 20.4447 57.8636 20.3327C57.2943 20.1834 56.8323 20.034 56.4776 19.8847C56.1229 19.7354 55.8196 19.516 55.5676 19.2267C55.3249 18.928 55.2036 18.5314 55.2036 18.0367C55.2036 17.6634 55.3156 17.318 55.5396 17.0007C55.7636 16.6834 56.0809 16.4314 56.4916 16.2447C56.9023 16.058 57.3689 15.9647 57.8916 15.9647C58.7129 15.9647 59.3756 16.1747 59.8796 16.5947C60.3836 17.0054 60.6543 17.5747 60.6916 18.3027H59.7116C59.6836 17.8547 59.5063 17.4954 59.1796 17.2247C58.8623 16.9447 58.4236 16.8047 57.8636 16.8047C57.3689 16.8047 56.9676 16.9214 56.6596 17.1547C56.3516 17.388 56.1976 17.6774 56.1976 18.0227C56.1976 18.3214 56.2863 18.5687 56.4636 18.7647C56.6503 18.9514 56.8789 19.1007 57.1496 19.2127C57.4203 19.3154 57.7843 19.432 58.2416 19.5627C58.7923 19.712 59.2309 19.8567 59.5576 19.9967C59.8843 20.1367 60.1643 20.342 60.3976 20.6127C60.6309 20.8834 60.7523 21.2427 60.7616 21.6907C60.7616 22.1014 60.6496 22.47 60.4256 22.7967C60.2016 23.114 59.8889 23.366 59.4876 23.5527C59.0863 23.7394 58.6243 23.8327 58.1016 23.8327ZM63.8803 16.9027V21.6487C63.8803 22.1154 63.969 22.4374 64.1463 22.6147C64.3237 22.792 64.6363 22.8807 65.0843 22.8807H65.9803V23.7207H64.9303C64.2397 23.7207 63.7263 23.562 63.3903 23.2447C63.0543 22.918 62.8863 22.386 62.8863 21.6487V16.9027H61.8223V16.0767H62.8863V14.1587H63.8803V16.0767H65.9803V16.9027H63.8803ZM74.5126 19.5067C74.5126 19.8427 74.5032 20.0994 74.4846 20.2767H68.1426C68.1706 20.8554 68.3106 21.35 68.5626 21.7607C68.8146 22.1714 69.1459 22.484 69.5566 22.6987C69.9672 22.904 70.4152 23.0067 70.9006 23.0067C71.5352 23.0067 72.0672 22.8527 72.4966 22.5447C72.9352 22.2367 73.2246 21.8214 73.3646 21.2987H74.4006C74.2139 22.0454 73.8126 22.6567 73.1966 23.1327C72.5899 23.5994 71.8246 23.8327 70.9006 23.8327C70.1819 23.8327 69.5379 23.674 68.9686 23.3567C68.3992 23.03 67.9512 22.5727 67.6246 21.9847C67.3072 21.3874 67.1486 20.692 67.1486 19.8987C67.1486 19.1054 67.3072 18.41 67.6246 17.8127C67.9419 17.2154 68.3852 16.758 68.9546 16.4407C69.5239 16.1234 70.1726 15.9647 70.9006 15.9647C71.6286 15.9647 72.2632 16.1234 72.8046 16.4407C73.3552 16.758 73.7752 17.1874 74.0646 17.7287C74.3632 18.2607 74.5126 18.8534 74.5126 19.5067ZM73.5186 19.4787C73.5279 18.9094 73.4112 18.424 73.1686 18.0227C72.9352 17.6214 72.6132 17.318 72.2026 17.1127C71.7919 16.9074 71.3439 16.8047 70.8586 16.8047C70.1306 16.8047 69.5099 17.038 68.9966 17.5047C68.4832 17.9714 68.1986 18.6294 68.1426 19.4787H73.5186ZM82.7793 23.8327C81.902 23.8327 81.1833 23.632 80.6233 23.2307C80.0727 22.82 79.7647 22.2647 79.6993 21.5647H80.7073C80.754 21.994 80.9547 22.344 81.3093 22.6147C81.6733 22.876 82.1587 23.0067 82.7653 23.0067C83.2973 23.0067 83.7127 22.8807 84.0113 22.6287C84.3193 22.3767 84.4733 22.064 84.4733 21.6907C84.4733 21.4294 84.3893 21.2147 84.2213 21.0467C84.0533 20.8787 83.8387 20.748 83.5773 20.6547C83.3253 20.552 82.98 20.4447 82.5413 20.3327C81.972 20.1834 81.51 20.034 81.1553 19.8847C80.8007 19.7354 80.4973 19.516 80.2453 19.2267C80.0027 18.928 79.8813 18.5314 79.8813 18.0367C79.8813 17.6634 79.9933 17.318 80.2173 17.0007C80.4413 16.6834 80.7587 16.4314 81.1693 16.2447C81.58 16.058 82.0467 15.9647 82.5693 15.9647C83.3907 15.9647 84.0533 16.1747 84.5573 16.5947C85.0613 17.0054 85.332 17.5747 85.3693 18.3027H84.3893C84.3613 17.8547 84.184 17.4954 83.8573 17.2247C83.54 16.9447 83.1013 16.8047 82.5413 16.8047C82.0467 16.8047 81.6453 16.9214 81.3373 17.1547C81.0293 17.388 80.8753 17.6774 80.8753 18.0227C80.8753 18.3214 80.964 18.5687 81.1413 18.7647C81.328 18.9514 81.5567 19.1007 81.8273 19.2127C82.098 19.3154 82.462 19.432 82.9193 19.5627C83.47 19.712 83.9087 19.8567 84.2353 19.9967C84.562 20.1367 84.842 20.342 85.0753 20.6127C85.3087 20.8834 85.43 21.2427 85.4393 21.6907C85.4393 22.1014 85.3273 22.47 85.1033 22.7967C84.8793 23.114 84.5667 23.366 84.1653 23.5527C83.764 23.7394 83.302 23.8327 82.7793 23.8327ZM94.2001 19.5067C94.2001 19.8427 94.1907 20.0994 94.1721 20.2767H87.8301C87.8581 20.8554 87.9981 21.35 88.2501 21.7607C88.5021 22.1714 88.8334 22.484 89.2441 22.6987C89.6547 22.904 90.1027 23.0067 90.5881 23.0067C91.2227 23.0067 91.7547 22.8527 92.1841 22.5447C92.6227 22.2367 92.9121 21.8214 93.0521 21.2987H94.0881C93.9014 22.0454 93.5001 22.6567 92.8841 23.1327C92.2774 23.5994 91.5121 23.8327 90.5881 23.8327C89.8694 23.8327 89.2254 23.674 88.6561 23.3567C88.0867 23.03 87.6387 22.5727 87.3121 21.9847C86.9947 21.3874 86.8361 20.692 86.8361 19.8987C86.8361 19.1054 86.9947 18.41 87.3121 17.8127C87.6294 17.2154 88.0727 16.758 88.6421 16.4407C89.2114 16.1234 89.8601 15.9647 90.5881 15.9647C91.3161 15.9647 91.9507 16.1234 92.4921 16.4407C93.0427 16.758 93.4627 17.1874 93.7521 17.7287C94.0507 18.2607 94.2001 18.8534 94.2001 19.5067ZM93.2061 19.4787C93.2154 18.9094 93.0987 18.424 92.8561 18.0227C92.6227 17.6214 92.3007 17.318 91.8901 17.1127C91.4794 16.9074 91.0314 16.8047 90.5461 16.8047C89.8181 16.8047 89.1974 17.038 88.6841 17.5047C88.1707 17.9714 87.8861 18.6294 87.8301 19.4787H93.2061ZM96.973 13.3607V23.7207H95.993V13.3607H96.973ZM106.108 19.5067C106.108 19.8427 106.099 20.0994 106.08 20.2767H99.7383C99.7663 20.8554 99.9063 21.35 100.158 21.7607C100.41 22.1714 100.742 22.484 101.152 22.6987C101.563 22.904 102.011 23.0067 102.496 23.0067C103.131 23.0067 103.663 22.8527 104.092 22.5447C104.531 22.2367 104.82 21.8214 104.96 21.2987H105.996C105.81 22.0454 105.408 22.6567 104.792 23.1327C104.186 23.5994 103.42 23.8327 102.496 23.8327C101.778 23.8327 101.134 23.674 100.564 23.3567C99.9949 23.03 99.5469 22.5727 99.2203 21.9847C98.9029 21.3874 98.7443 20.692 98.7443 19.8987C98.7443 19.1054 98.9029 18.41 99.2203 17.8127C99.5376 17.2154 99.9809 16.758 100.55 16.4407C101.12 16.1234 101.768 15.9647 102.496 15.9647C103.224 15.9647 103.859 16.1234 104.4 16.4407C104.951 16.758 105.371 17.1874 105.66 17.7287C105.959 18.2607 106.108 18.8534 106.108 19.5067ZM105.114 19.4787C105.124 18.9094 105.007 18.424 104.764 18.0227C104.531 17.6214 104.209 17.318 103.798 17.1127C103.388 16.9074 102.94 16.8047 102.454 16.8047C101.726 16.8047 101.106 17.038 100.592 17.5047C100.079 17.9714 99.7943 18.6294 99.7383 19.4787H105.114ZM107.453 19.8987C107.453 19.1054 107.612 18.4147 107.929 17.8267C108.247 17.2294 108.685 16.772 109.245 16.4547C109.805 16.128 110.445 15.9647 111.163 15.9647C112.106 15.9647 112.881 16.198 113.487 16.6647C114.103 17.1314 114.5 17.766 114.677 18.5687H113.627C113.497 18.018 113.212 17.5887 112.773 17.2807C112.344 16.9634 111.807 16.8047 111.163 16.8047C110.65 16.8047 110.188 16.9214 109.777 17.1547C109.367 17.388 109.04 17.738 108.797 18.2047C108.564 18.662 108.447 19.2267 108.447 19.8987C108.447 20.5707 108.564 21.14 108.797 21.6067C109.04 22.0734 109.367 22.4234 109.777 22.6567C110.188 22.89 110.65 23.0067 111.163 23.0067C111.807 23.0067 112.344 22.8527 112.773 22.5447C113.212 22.2274 113.497 21.7887 113.627 21.2287H114.677C114.5 22.0127 114.103 22.6427 113.487 23.1187C112.871 23.5947 112.097 23.8327 111.163 23.8327C110.445 23.8327 109.805 23.674 109.245 23.3567C108.685 23.03 108.247 22.5727 107.929 21.9847C107.612 21.3874 107.453 20.692 107.453 19.8987ZM117.761 16.9027V21.6487C117.761 22.1154 117.85 22.4374 118.027 22.6147C118.205 22.792 118.517 22.8807 118.965 22.8807H119.861V23.7207H118.811C118.121 23.7207 117.607 23.562 117.271 23.2447C116.935 22.918 116.767 22.386 116.767 21.6487V16.9027H115.703V16.0767H116.767V14.1587H117.761V16.0767H119.861V16.9027H117.761ZM121.967 14.6347C121.771 14.6347 121.603 14.5647 121.463 14.4247C121.323 14.2847 121.253 14.112 121.253 13.9067C121.253 13.7014 121.323 13.5334 121.463 13.4027C121.603 13.2627 121.771 13.1927 121.967 13.1927C122.163 13.1927 122.331 13.2627 122.471 13.4027C122.611 13.5334 122.681 13.7014 122.681 13.9067C122.681 14.112 122.611 14.2847 122.471 14.4247C122.331 14.5647 122.163 14.6347 121.967 14.6347ZM122.457 16.0767V23.7207H121.477V16.0767H122.457ZM128.023 23.8327C127.304 23.8327 126.655 23.674 126.077 23.3567C125.507 23.03 125.055 22.5727 124.719 21.9847C124.392 21.3874 124.229 20.692 124.229 19.8987C124.229 19.1054 124.397 18.4147 124.733 17.8267C125.069 17.2294 125.526 16.772 126.105 16.4547C126.683 16.128 127.332 15.9647 128.051 15.9647C128.769 15.9647 129.418 16.128 129.997 16.4547C130.585 16.772 131.042 17.2294 131.369 17.8267C131.705 18.4147 131.873 19.1054 131.873 19.8987C131.873 20.6827 131.705 21.3734 131.369 21.9707C131.033 22.568 130.571 23.03 129.983 23.3567C129.395 23.674 128.741 23.8327 128.023 23.8327ZM128.023 22.9787C128.527 22.9787 128.993 22.8667 129.423 22.6427C129.852 22.4094 130.197 22.064 130.459 21.6067C130.729 21.14 130.865 20.5707 130.865 19.8987C130.865 19.2267 130.734 18.662 130.473 18.2047C130.211 17.738 129.866 17.3927 129.437 17.1687C129.007 16.9354 128.541 16.8187 128.037 16.8187C127.533 16.8187 127.066 16.9354 126.637 17.1687C126.207 17.3927 125.862 17.738 125.601 18.2047C125.349 18.662 125.223 19.2267 125.223 19.8987C125.223 20.5707 125.349 21.14 125.601 21.6067C125.862 22.064 126.203 22.4094 126.623 22.6427C127.052 22.8667 127.519 22.9787 128.023 22.9787ZM137.243 15.9367C138.158 15.9367 138.904 16.2214 139.483 16.7907C140.062 17.3507 140.351 18.1674 140.351 19.2407V23.7207H139.385V19.3527C139.385 18.522 139.175 17.8874 138.755 17.4487C138.344 17.01 137.78 16.7907 137.061 16.7907C136.324 16.7907 135.736 17.024 135.297 17.4907C134.858 17.9574 134.639 18.6434 134.639 19.5487V23.7207H133.659V16.0767H134.639V17.3787C134.882 16.912 135.232 16.5574 135.689 16.3147C136.146 16.0627 136.664 15.9367 137.243 15.9367Z"
            fill="#6422C8"
        />
    </svg>
);
